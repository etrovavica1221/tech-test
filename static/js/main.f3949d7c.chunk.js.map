{"version":3,"sources":["requests/getImages.js","components/Search.js/Search.js","components/SearchResults.js","components/App.js","serviceWorker.js","index.js"],"names":["getImages","query","axios","get","then","res","data","collection","items","filter","image","media_type","map","links","href","catch","err","console","log","Promise","resolve","Search","setSearchResults","setIsFirstTimeVisit","useState","value","setValue","handleSubmit","e","a","preventDefault","className","onSubmit","type","onChange","target","SearchResults","results","length","id","data-testid","src","alt","key","App","searchResults","isFirstTimeVisit","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"yVAqBeA,EAnBG,SAACC,GACf,OAAKA,EAGMC,IACFC,IADE,+CAC0CF,IAC5CG,MAAK,SAACC,GAKH,OAJqBA,EAAIC,KAAKC,WAAWC,MACPC,QAAO,SAAAC,GAAK,MAAiC,UAA7BA,EAAMJ,KAAK,GAAGK,cACpCC,KAAI,SAAAF,GAAK,OAAIA,EAAMG,MAAM,GAAGC,WAI3DC,OAAM,SAACC,GACJC,QAAQC,IAAIF,MAZbG,QAAQC,QAAQ,KC6BhBC,EA5BA,SAAC,GAA+C,IAA7CC,EAA4C,EAA5CA,iBAAkBC,EAA0B,EAA1BA,oBAA0B,EAEhCC,qBAFgC,mBAEnDC,EAFmD,KAE5CC,EAF4C,KAIpDC,EAAY,uCAAG,WAAMC,GAAN,SAAAC,EAAA,6DACjBD,EAAEE,iBADe,KAEjBR,EAFiB,SAEMtB,EAAUyB,GAFhB,kCAGjBF,GAAoB,GAHH,2CAAH,sDAMlB,OACI,oCACI,0BAAMQ,UAAU,cAAcC,SAAUL,GACpC,2BAAOI,UAAU,eAAeE,KAAK,OAAOC,SAAU,SAACN,GAAD,OAAOF,EAASE,EAAEO,OAAOV,UAC/E,4BAAQM,UAAU,gBAAgBE,KAAK,UAAvC,aCUDG,G,MAzBO,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAErB,OAAKA,EAAQC,OAIL,8BACI,yBAAKC,GAAG,mBACJ,+CAEJ,yBAAKR,UAAU,gBAAgBS,cAAY,cAClCH,EAAQzB,KAAI,SAACF,GAAD,OACT,yBAAKqB,UAAU,aAAaU,IAAK/B,EAAOgC,IAAI,aAAaC,IAAKjC,SAT3E,uBAAG6B,GAAG,eAAN,gBCeAK,MAjBf,WAAgB,IAAD,EAC6BpB,mBAAS,IADtC,mBACNqB,EADM,KACSvB,EADT,OAEmCE,oBAAS,GAF5C,mBAENsB,EAFM,KAEYvB,EAFZ,KAIb,OACE,yBAAKQ,UAAU,OACX,yBACEA,UAAU,YACVU,IAAI,yEACJC,IAAI,aAEN,kBAAC,EAAD,CAAQpB,iBAAkBA,EAAkBC,oBAAqBA,KAC/DuB,GAAoB,kBAAC,EAAD,CAAeT,QAASQ,MCLlCE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvD,MAAK,SAAAwD,GACJA,EAAaC,gBAEd9C,OAAM,SAAA+C,GACL7C,QAAQ6C,MAAMA,EAAMC,c","file":"static/js/main.f3949d7c.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst getImages = (query) => {\n    if (!query) {\n        return Promise.resolve([]);\n    } else {\n        return axios\n            .get(`https://images-api.nasa.gov/search?q=${query}`)\n            .then((res) => {\n                const imageResults = res.data.collection.items;\n                const parsedImages = imageResults.filter(image => image.data[0].media_type === 'image');\n                const images = parsedImages.map(image => image.links[0].href);\n                \n                return images;\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n    }\n};\n\nexport default getImages;","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport '../../styles/Search.css';\nimport getImages from '../../requests/getImages.js';\n\nconst Search = ({ setSearchResults, setIsFirstTimeVisit }) => {\n\n    const [value, setValue] = useState();\n\n    const handleSubmit = async(e) => {\n        e.preventDefault();\n        setSearchResults(await getImages(value));\n        setIsFirstTimeVisit(false);\n    };\n\n    return(\n        <>\n            <form className=\"search-form\" onSubmit={handleSubmit}>\n                <input className=\"search-input\" type=\"text\" onChange={(e) => setValue(e.target.value)} />\n                <button className=\"search-button\" type=\"submit\">\n                    Search\n                </button> \n            </form>\n        </>\n    );\n};\n\n\nSearch.propTypes = {\n    value: PropTypes.array,\n    handleSubmit: PropTypes.func,\n}\n\nexport default Search;","import React from 'react';\nimport '../styles/SearchResults.css';\nimport PropTypes from 'prop-types';\n\nconst SearchResults = ({ results }) => {  \n\n    if (!results.length) {\n        return <p id=\"p-NoResults\" >No results</p>   \n    } else {  \n        return(\n            <span>\n                <div id=\"p-SearchResults\">\n                    <p>Search Results:</p>\n                </div>\n                <div className=\"SearchResults\" data-testid=\"resultTest\">\n                        {results.map((image) => (\n                            <img className=\"card-image\" src={image} alt=\"spaceImage\" key={image} />\n                        ))}\n                </div>\n            </span>\n        );\n    }\n};\n\nSearchResults.propTypes = {\n    image: PropTypes.func,\n    results: PropTypes.array,\n}\n\nexport default SearchResults;\n","import React, { useState } from 'react';\nimport '../styles/App.css';\nimport Search from'./Search.js/Search'\nimport SearchResults from './SearchResults';\n\nfunction App() {\n  const [searchResults, setSearchResults] = useState([]);\n  const [isFirstTimeVisit, setIsFirstTimeVisit] = useState(true);\n\n  return (\n    <div className=\"App\">\n        <img\n          className=\"nasa-logo\" \n          src=\"https://cdn.cnn.com/cnnnext/dam/assets/200424060716-nasa-worm-logo.jpg\"\n          alt=\"nasaLogo\"\n        />\n        <Search setSearchResults={setSearchResults} setIsFirstTimeVisit={setIsFirstTimeVisit}/>\n        {!isFirstTimeVisit && <SearchResults results={searchResults} />}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}